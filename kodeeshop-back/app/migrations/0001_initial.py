# Generated by Django 3.1 on 2020-09-05 03:39

import app.models.account
import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('slug', models.CharField(max_length=250, unique=True)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'collection',
                'default_related_name': 'collection',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('email', models.EmailField(blank=True, max_length=250, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=6)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'customer',
                'default_related_name': 'customer',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerShipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('country', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=30, null=True)),
                ('district', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'db_table': 'customer_shipment',
                'default_related_name': 'customer_shipment',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=150)),
                ('type', models.CharField(choices=[('Percent', 'Discount Percent'), ('Price', 'Discount Price'), ('Free_ship', 'Discount Free Ship')], default='Percent', max_length=9)),
                ('rate', models.FloatField(blank=True, max_length=11, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('apply_date', models.DateTimeField()),
                ('expiry_date', models.DateTimeField(default=None)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'discount',
                'default_related_name': 'discount',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipment_status', models.CharField(choices=[('Not_ship', 'Order Shipment Not Ship'), ('Shipping', 'Order Shipment Shipping'), ('Shipped', 'Order Shipment Shipped')], default='Not_ship', max_length=8)),
                ('payment_status', models.CharField(choices=[('Not_pay', 'Order Payment Not Pay'), ('Paying', 'Order Payment Paying'), ('Paid', 'Order Payment Paid')], default='Not_pay', max_length=7)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order', to='app.customer')),
            ],
            options={
                'db_table': 'order',
                'default_related_name': 'order',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='OrderShipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('country', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=30, null=True)),
                ('district', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'db_table': 'order_shipment',
                'default_related_name': 'order_shipment',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('content', models.CharField(max_length=1000)),
                ('slug', models.CharField(max_length=250, unique=True)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product', to='app.collection')),
            ],
            options={
                'db_table': 'product',
                'default_related_name': 'product',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('primary_price', models.FloatField(blank=True, max_length=11, null=True)),
                ('sale_price', models.FloatField(blank=True, max_length=11, null=True)),
                ('quantity', models.IntegerField()),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_attribute', to='app.product')),
            ],
            options={
                'db_table': 'product_attribute',
                'default_related_name': 'product_attribute',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=250)),
                ('default', models.BooleanField(default=True)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_image', to='app.product')),
            ],
            options={
                'db_table': 'product_image',
                'default_related_name': 'product_image',
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_variant', to='app.product')),
            ],
            options={
                'db_table': 'product_variant',
                'default_related_name': 'product_variant',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('slug', models.CharField(max_length=250, unique=True)),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'tag',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductVariantValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_variant_value', to='app.product')),
                ('product_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_variant_value', to='app.productimage')),
                ('product_vartiant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_variant_value', to='app.productvariant')),
            ],
            options={
                'db_table': 'product_variant_value',
                'default_related_name': 'product_variant_value',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_tag', to='app.product')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_tag', to='app.tag')),
            ],
            options={
                'db_table': 'product_tag',
                'default_related_name': 'product_tag',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_attribute_value', to='app.product')),
                ('product_attribute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_attribute_value', to='app.productattribute')),
                ('product_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_attribute_value', to='app.productvariant')),
                ('product_variant_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_attribute_value', to='app.productvariantvalue')),
            ],
            options={
                'db_table': 'product_attribute_value',
                'default_related_name': 'product_attribute_value',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='tag',
            field=models.ManyToManyField(related_name='product', through='app.ProductTag', to='app.Tag'),
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('quantity', models.IntegerField()),
                ('price', models.FloatField(max_length=11)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_product', to='app.product')),
                ('product_attribute_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_product', to='app.productattributevalue')),
            ],
            options={
                'db_table': 'order_product',
                'default_related_name': 'order_product',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='OrderOrderProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_order_product', to='app.order')),
                ('order_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_order_product', to='app.orderproduct')),
            ],
            options={
                'db_table': 'order_order_product',
                'default_related_name': 'order_order_product',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='order_shipment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order', to='app.ordershipment'),
        ),
        migrations.AddField(
            model_name='customer',
            name='customer_shipment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer', to='app.customershipment'),
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('create_at', models.DateTimeField(blank=True, default=datetime.datetime(2020, 9, 5, 10, 39, 28), null=True)),
                ('update_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cart', to='app.customer')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cart', to='app.product')),
            ],
            options={
                'db_table': 'cart',
                'default_related_name': 'cart',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('password', models.CharField(max_length=250)),
                ('email', models.EmailField(max_length=250, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'account',
                'default_related_name': 'account',
            },
            managers=[
                ('objects', app.models.account.AccountManager()),
            ],
        ),
    ]
